//
//  HomePresenter.swift
//  quizzie
//
//  Created Ensar Baba on 30.04.2020.
//  Copyright Â© 2020 Ensar Baba. All rights reserved.
//
//  Template generated by Edward
//

import UIKit

struct Option {
    var optionTitle: String
    var optionBackground: UIColor
}

// MARK: View -
protocol HomeViewProtocol: LoadDataView {
    func didFetchQuestions(quizResponse: QuizResponse)
    func didErrorOccur(error: AlertMessage)
}

// MARK: Presenter -
protocol HomePresenterProtocol: class {
    var view: HomeViewProtocol? { get set }
    var quizStatus: QuizStatusData { get set }
    var quizQuestions: QuizResponse? { get }
    var shuffledOptions: [Option] { get set }
    func currentQuestionData() -> Results
    func currentOption(index: Int) -> Option
    func modifyDataSourceWith(selectedIndex: Int)
    func fetchQuestions()
    func setPointForUser(index: Int)
}

class HomePresenter: HomePresenterProtocol {
    func setPointForUser(index: Int) {
        if currentQuestionData().correct_answer == currentOption(index: index).optionTitle {userPoint += 10}
    }
    
    func modifyDataSourceWith(selectedIndex: Int) {
        
        for index in 0..<shuffledOptions.count {
            if shuffledOptions[index].optionTitle == self.currentQuestionData().correct_answer {
                shuffledOptions[index].optionBackground = .green
                break
            }
        }
        if shuffledOptions[selectedIndex].optionTitle != self.currentQuestionData().correct_answer {
                  shuffledOptions[selectedIndex].optionBackground = .red
        }
    }
    
    func currentOption(index: Int) -> Option {
        if shuffledOptions.count <= 0 {
            for option in self.currentQuestionData().incorrect_answers! {
                shuffledOptions.append(Option(optionTitle: option, optionBackground: .white))
            }
            shuffledOptions.append(Option(optionTitle: self.currentQuestionData().correct_answer!, optionBackground: .white))
            shuffledOptions.shuffle()
        }
        return shuffledOptions[index]
    }
    
    weak var view: HomeViewProtocol?
    public var quizStatus = QuizStatusData()
    public var quizQuestions: QuizResponse?
    var optionsShuffled: Bool = false
    public var shuffledOptions = [Option]()
    private var userPoint = 0
    
    init(view: HomeViewProtocol) {
        self.view = view
    }
    
    func currentQuestionData() -> Results {
        return (self.quizQuestions?.results?[quizStatus.currentQuestionNo-1])!
    }
    
    func fetchQuestions() {
        view?.startLoading()
        APIManager.shared().call(type: RequestItemsType.questions(count: "12")) { (questions: (QuizResponse)?, message: AlertMessage?) in
            if let questions = questions {
                self.quizQuestions = questions
                self.view?.didFetchQuestions(quizResponse: questions)
            } else {
                self.view?.didErrorOccur(error: message ?? AlertMessage(title: "Alert", body: "Something went wrong"))
            }
            self.view?.stopLoading()
        }
    }
    
}
